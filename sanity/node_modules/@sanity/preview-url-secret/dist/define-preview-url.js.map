{"version":3,"file":"define-preview-url.js","sources":["../src/definePreviewUrl.ts"],"sourcesContent":["import {\n  urlSearchParamPreviewPathname,\n  urlSearchParamPreviewSecret,\n} from './constants'\nimport type {\n  PreviewUrlResolver,\n  PreviewUrlResolverContext,\n  PreviewUrlResolverOptions,\n} from './types'\n\n/**\n * @internal\n */\nexport function definePreviewUrl<SanityClientType>(\n  options: PreviewUrlResolverOptions,\n): PreviewUrlResolver<SanityClientType> {\n  const {\n    draftMode,\n    origin = typeof location === 'undefined'\n      ? 'https://localhost'\n      : location.origin,\n  } = options\n  let { preview = '/' } = options\n  const productionUrl = new URL(preview, origin)\n  const enableDraftModeUrl = draftMode.enable\n    ? new URL(draftMode.enable, origin)\n    : undefined\n\n  return async (context): Promise<string> => {\n    try {\n      if (context.previewSearchParam) {\n        const restoredUrl = new URL(context.previewSearchParam, productionUrl)\n        if (restoredUrl.origin === productionUrl.origin) {\n          preview = `${restoredUrl.pathname}${restoredUrl.search}`\n        }\n      } else if (context.referrer) {\n        const referrerUrl = new URL(context.referrer)\n        if (referrerUrl.origin === productionUrl.origin) {\n          preview = `${referrerUrl.pathname}${referrerUrl.search}`\n        }\n      }\n    } catch {\n      // ignore\n    }\n    // Prevent infinite recursion\n    if (\n      typeof location !== 'undefined' &&\n      location.origin === productionUrl.origin &&\n      context.studioBasePath &&\n      (preview.startsWith(`${context.studioBasePath}/`) ||\n        preview === context.studioBasePath)\n    ) {\n      preview = options.preview || '/'\n    }\n    const previewUrl = new URL(preview, productionUrl)\n    if (enableDraftModeUrl) {\n      const enableDraftModeRequestUrl = new URL(enableDraftModeUrl)\n      const { searchParams } = enableDraftModeRequestUrl\n      searchParams.set(urlSearchParamPreviewSecret, context.previewUrlSecret)\n      if (previewUrl.pathname !== enableDraftModeRequestUrl.pathname) {\n        searchParams.set(\n          urlSearchParamPreviewPathname,\n          `${previewUrl.pathname}${previewUrl.search}`,\n        )\n      }\n\n      return enableDraftModeRequestUrl.toString()\n    }\n    return previewUrl.toString()\n  }\n}\n\nexport type {\n  PreviewUrlResolver,\n  PreviewUrlResolverContext,\n  PreviewUrlResolverOptions,\n}\n"],"names":["definePreviewUrl","options","draftMode","origin","location","preview","productionUrl","URL","enableDraftModeUrl","enable","async","context","previewSearchParam","restoredUrl","pathname","search","referrer","referrerUrl","studioBasePath","startsWith","previewUrl","enableDraftModeRequestUrl","searchParams","set","urlSearchParamPreviewSecret","previewUrlSecret","urlSearchParamPreviewPathname","toString"],"mappings":"2DAaO,SAASA,EACdC,GAEM,MAAAC,UACJA,EAAAC,OACAA,GAA6B,oBAAbC,SACZ,oBACAA,SAASD,SACXF,EACA,IAAAI,QAAEA,EAAU,KAAQJ,EACxB,MAAMK,EAAgB,IAAIC,IAAIF,EAASF,GACjCK,EAAqBN,EAAUO,OACjC,IAAIF,IAAIL,EAAUO,OAAQN,QAC1B,EAEJ,OAAOO,UACD,IACF,GAAIC,EAAQC,mBAAoB,CAC9B,MAAMC,EAAc,IAAIN,IAAII,EAAQC,mBAAoBN,GACpDO,EAAYV,SAAWG,EAAcH,SACvCE,EAAa,GAAAQ,EAAYC,WAAWD,EAAYE,SAClD,MACF,GAAWJ,EAAQK,SAAU,CAC3B,MAAMC,EAAc,IAAIV,IAAII,EAAQK,UAChCC,EAAYd,SAAWG,EAAcH,SACvCE,EAAa,GAAAY,EAAYH,WAAWG,EAAYF,SAEpD,CAAA,CACM,MAER,CAGsB,oBAAbX,UACPA,SAASD,SAAWG,EAAcH,QAClCQ,EAAQO,iBACPb,EAAQc,cAAcR,EAAQO,oBAC7Bb,IAAYM,EAAQO,kBAEtBb,EAAUJ,EAAQI,SAAW,KAE/B,MAAMe,EAAa,IAAIb,IAAIF,EAASC,GACpC,GAAIE,EAAoB,CAChB,MAAAa,EAA4B,IAAId,IAAIC,IACpCc,aAAEA,GAAiBD,EASzB,OARaC,EAAAC,IAAIC,EAA6Bb,EAAQc,kBAClDL,EAAWN,WAAaO,EAA0BP,UACvCQ,EAAAC,IACXG,EACG,GAAAN,EAAWN,WAAWM,EAAWL,UAIjCM,EAA0BM,UACnC,CACA,OAAOP,EAAWO,UAAS,CAE/B,QAAA3B"}