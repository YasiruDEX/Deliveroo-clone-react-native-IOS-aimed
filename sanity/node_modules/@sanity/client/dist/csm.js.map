{"version":3,"file":"csm.js","sources":["../src/csm/applySourceDocuments.ts","../src/csm/resolvedKeyedSourcePath.ts","../src/csm/resolveEditUrl.ts"],"sourcesContent":["import {DRAFTS_PREFIX, getPublishedId} from './getPublishedId'\nimport {parseJsonPath} from './jsonPath'\nimport {resolveMapping} from './resolveMapping'\nimport * as paths from './studioPath'\nimport type {\n  Any,\n  ApplySourceDocumentsUpdateFunction,\n  ClientPerspective,\n  ContentSourceMap,\n  ContentSourceMapDocuments,\n  Path,\n  SanityDocument,\n} from './types'\nimport {walkMap} from './walkMap'\n\nconst defaultUpdateFunction = <T = unknown>(changed: T): T => changed\n\n/**\n * Optimistically applies source documents to a result, using the content source map to trace fields.\n * Can be used to apply mutations to documents being edited in a Studio, or any mutation on Content Lake, to a result with extremely low latency.\n * @alpha\n */\nexport function applySourceDocuments<Result = unknown>(\n  result: Result,\n  resultSourceMap: ContentSourceMap | undefined,\n  getCachedDocument: (\n    sourceDocument: ContentSourceMapDocuments[number],\n  ) => Partial<SanityDocument> | null | undefined,\n  updateFn: ApplySourceDocumentsUpdateFunction = defaultUpdateFunction,\n  perspective: ClientPerspective = 'raw',\n): Result {\n  if (!resultSourceMap) return result\n\n  if (perspective !== 'published' && perspective !== 'raw' && perspective !== 'previewDrafts') {\n    throw new Error(`Unknown perspective \"${perspective}\"`)\n  }\n\n  return walkMap(JSON.parse(JSON.stringify(result)), (value, path) => {\n    const resolveMappingResult = resolveMapping(path, resultSourceMap)\n    if (!resolveMappingResult) {\n      // console.warn('no mapping for path', path)\n      return value\n    }\n\n    const {mapping, pathSuffix} = resolveMappingResult\n    if (mapping.type !== 'value') {\n      return value\n    }\n\n    if (mapping.source.type !== 'documentValue') {\n      return value\n    }\n\n    const sourceDocument = resultSourceMap.documents[mapping.source.document]\n    const sourcePath = resultSourceMap.paths[mapping.source.path]\n\n    if (sourceDocument) {\n      const parsedPath = parseJsonPath(sourcePath + pathSuffix)\n      const stringifiedPath = paths.toString(parsedPath as Path)\n\n      // The _id is sometimes used used as `key` in lists, and should not be changed optimistically\n      if (stringifiedPath === '_id') {\n        return value\n      }\n\n      let cachedDocument: Partial<SanityDocument> | null | undefined\n      if (perspective === 'previewDrafts') {\n        cachedDocument = getCachedDocument(\n          sourceDocument._id.startsWith(DRAFTS_PREFIX)\n            ? sourceDocument\n            : {...sourceDocument, _id: `${DRAFTS_PREFIX}.${sourceDocument._id}}`},\n        )\n        if (!cachedDocument) {\n          cachedDocument = getCachedDocument(\n            sourceDocument._id.startsWith(DRAFTS_PREFIX)\n              ? {...sourceDocument, _id: getPublishedId(sourceDocument._id)}\n              : sourceDocument,\n          )\n        }\n        if (cachedDocument) {\n          cachedDocument = {\n            ...cachedDocument,\n            _id: getPublishedId(sourceDocument._id),\n            _originalId: sourceDocument._id,\n          }\n        }\n      } else {\n        cachedDocument = getCachedDocument(sourceDocument)\n      }\n\n      if (!cachedDocument) {\n        return value\n      }\n\n      const changedValue = cachedDocument\n        ? paths.get<Result[keyof Result]>(cachedDocument, stringifiedPath, value)\n        : value\n      return value === changedValue\n        ? value\n        : updateFn<Result[keyof Result]>(changedValue as Any, {\n            cachedDocument,\n            previousValue: value as Result[keyof Result],\n            sourceDocument,\n            sourcePath: parsedPath,\n          })\n    }\n\n    return value\n  }) as Result\n}\n","import {jsonPath, parseJsonPath} from './jsonPath'\nimport type {ContentSourceMapParsedPath} from './types'\n\n/**\n * @internal\n */\nexport function resolvedKeyedSourcePath(options: {\n  keyedResultPath: ContentSourceMapParsedPath\n  pathSuffix?: string\n  sourceBasePath: string\n}): ContentSourceMapParsedPath {\n  const {keyedResultPath, pathSuffix, sourceBasePath} = options\n\n  const inferredResultPath = pathSuffix === undefined ? [] : parseJsonPath(pathSuffix)\n\n  const inferredPath = keyedResultPath.slice(keyedResultPath.length - inferredResultPath.length)\n\n  const inferredPathSuffix = inferredPath.length ? jsonPath(inferredPath).slice(1) : ''\n\n  return parseJsonPath(sourceBasePath + inferredPathSuffix)\n}\n","import {createEditUrl} from './createEditUrl'\nimport {studioPathToJsonPath} from './jsonPath'\nimport {resolveEditInfo} from './resolveEditInfo'\nimport type {ResolveEditUrlOptions} from './types'\n\n/** @alpha */\nexport function resolveEditUrl(\n  options: ResolveEditUrlOptions,\n): ReturnType<typeof createEditUrl> | undefined {\n  const {resultSourceMap, studioUrl} = options\n  const resultPath = studioPathToJsonPath(options.resultPath)\n\n  const editInfo = resolveEditInfo({\n    resultPath,\n    resultSourceMap,\n    studioUrl,\n  })\n  if (!editInfo) {\n    return undefined\n  }\n\n  return createEditUrl(editInfo)\n}\n"],"names":["defaultUpdateFunction","changed","applySourceDocuments","result","resultSourceMap","getCachedDocument","updateFn","arguments","length","undefined","perspective","Error","concat","walkMap","JSON","parse","stringify","value","path","resolveMappingResult","resolveMapping","mapping","pathSuffix","type","source","sourceDocument","documents","document","sourcePath","paths","parsedPath","parseJsonPath","stringifiedPath","paths.toString","cachedDocument","_id","startsWith","DRAFTS_PREFIX","getPublishedId","_originalId","changedValue","paths.get","previousValue","resolvedKeyedSourcePath","options","keyedResultPath","sourceBasePath","inferredResultPath","inferredPath","slice","inferredPathSuffix","jsonPath","resolveEditUrl","studioUrl","resultPath","studioPathToJsonPath","editInfo","resolveEditInfo","createEditUrl"],"mappings":"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"}