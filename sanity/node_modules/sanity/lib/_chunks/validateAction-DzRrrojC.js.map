{"version":3,"file":"validateAction-DzRrrojC.js","sources":["../../src/_internal/cli/util/workerChannels.ts","../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import type {MessagePort, Worker} from 'worker_threads'\n\ntype StreamReporter<TPayload = unknown> = {emit: (payload: TPayload) => void; end: () => void}\ntype EventReporter<TPayload = unknown> = (payload: TPayload) => void\ntype EventReceiver<TPayload = unknown> = () => Promise<TPayload>\ntype StreamReceiver<TPayload = unknown> = () => AsyncIterable<TPayload>\n\ntype EventKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelEvent<any> ? K : never\n}[keyof TWorkerChannel]\ntype StreamKeys<TWorkerChannel extends WorkerChannel> = {\n  [K in keyof TWorkerChannel]: TWorkerChannel[K] extends WorkerChannelStream<any> ? K : never\n}[keyof TWorkerChannel]\n\ntype EventMessage<TPayload = unknown> = {type: 'event'; name: string; payload: TPayload}\ntype StreamEmissionMessage<TPayload = unknown> = {type: 'emission'; name: string; payload: TPayload}\ntype StreamEndMessage = {type: 'end'; name: string}\ntype WorkerChannelMessage = EventMessage | StreamEmissionMessage | StreamEndMessage\n\n/**\n * Represents the definition of a \"worker channel\" to report progress from the\n * worker to the parent. Worker channels can define named events or streams and\n * the worker will report events and streams while the parent will await them.\n * This allows the control flow of the parent to follow the control flow of the\n * worker 1-to-1.\n */\nexport type WorkerChannel<\n  TWorkerChannel extends Record<\n    string,\n    WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>\n  > = Record<string, WorkerChannelEvent<unknown> | WorkerChannelStream<unknown>>,\n> = TWorkerChannel\n\nexport type WorkerChannelEvent<TPayload = void> = {type: 'event'; payload: TPayload}\nexport type WorkerChannelStream<TPayload = void> = {type: 'stream'; payload: TPayload}\n\nexport interface WorkerChannelReporter<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReporter<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReporter<TPayload>\n      : void\n  }\n}\n\nexport interface WorkerChannelReceiver<TWorkerChannel extends WorkerChannel> {\n  event: {\n    [K in EventKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelEvent<infer TPayload>\n      ? EventReceiver<TPayload>\n      : void\n  }\n  stream: {\n    [K in StreamKeys<TWorkerChannel>]: TWorkerChannel[K] extends WorkerChannelStream<infer TPayload>\n      ? StreamReceiver<TPayload>\n      : void\n  }\n  // TODO: good candidate for [Symbol.asyncDispose] when our tooling better supports it\n  dispose: () => Promise<number>\n}\n\n/**\n * A simple queue that has two primary methods: `push(message)` and\n * `await next()`. This message queue is used by the \"receiver\" of the worker\n * channel and this class handles buffering incoming messages if the worker is\n * producing faster than the parent as well as returning a promise if there is\n * no message yet in the queue when the parent awaits `next()`.\n */\nclass MessageQueue<T> {\n  resolver: ((result: IteratorResult<T>) => void) | null = null\n  queue: T[] = []\n\n  push(message: T) {\n    if (this.resolver) {\n      this.resolver({value: message, done: false})\n      this.resolver = null\n    } else {\n      this.queue.push(message)\n    }\n  }\n\n  next(): Promise<IteratorResult<T>> {\n    if (this.queue.length) {\n      return Promise.resolve({value: this.queue.shift()!, done: false})\n    }\n\n    return new Promise((resolve) => (this.resolver = resolve))\n  }\n\n  end() {\n    if (this.resolver) {\n      this.resolver({value: undefined, done: true})\n    }\n  }\n}\n\nfunction isWorkerChannelMessage(message: unknown): message is WorkerChannelMessage {\n  if (typeof message !== 'object') return false\n  if (!message) return false\n  if (!('type' in message)) return false\n  if (typeof message.type !== 'string') return false\n  const types: string[] = ['event', 'emission', 'end'] satisfies WorkerChannelMessage['type'][]\n  return types.includes(message.type)\n}\n\n/**\n * Creates a \"worker channel receiver\" that subscribes to incoming messages\n * from the given worker and returns promises for worker channel events and\n * async iterators for worker channel streams.\n */\nexport function createReceiver<TWorkerChannel extends WorkerChannel>(\n  worker: Worker,\n): WorkerChannelReceiver<TWorkerChannel> {\n  const _events = new Map<string, MessageQueue<EventMessage>>()\n  const _streams = new Map<string, MessageQueue<StreamEmissionMessage>>()\n  const errors = new MessageQueue<{type: 'error'; error: unknown}>()\n\n  const eventQueue = (name: string) => {\n    const queue = _events.get(name) ?? new MessageQueue()\n    if (!_events.has(name)) _events.set(name, queue)\n    return queue\n  }\n\n  const streamQueue = (name: string) => {\n    const queue = _streams.get(name) ?? new MessageQueue()\n    if (!_streams.has(name)) _streams.set(name, queue)\n    return queue\n  }\n\n  const handleMessage = (message: unknown) => {\n    if (!isWorkerChannelMessage(message)) return\n    if (message.type === 'event') eventQueue(message.name).push(message)\n    if (message.type === 'emission') streamQueue(message.name).push(message)\n    if (message.type === 'end') streamQueue(message.name).end()\n  }\n\n  const handleError = (error: unknown) => {\n    errors.push({type: 'error', error})\n  }\n\n  worker.addListener('message', handleMessage)\n  worker.addListener('error', handleError)\n\n  return {\n    event: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReceiver: EventReceiver = async () => {\n          const {value} = await Promise.race([eventQueue(name).next(), errors.next()])\n          if (value.type === 'error') throw value.error\n          return value.payload\n        }\n\n        return eventReceiver\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReceiver<TWorkerChannel>['stream'], {\n      get: (target, prop) => {\n        if (typeof prop !== 'string') return target[prop as keyof typeof target]\n        const name = prop // alias for better typescript narrowing\n\n        async function* streamReceiver() {\n          while (true) {\n            const {value, done} = await Promise.race([streamQueue(name).next(), errors.next()])\n            if (done) return\n            if (value.type === 'error') throw value.error\n            yield value.payload\n          }\n        }\n\n        return streamReceiver satisfies StreamReceiver\n      },\n    }),\n    dispose: () => {\n      worker.removeListener('message', handleMessage)\n      worker.removeListener('error', handleError)\n      return worker.terminate()\n    },\n  }\n}\n\n/**\n * Creates a \"worker channel reporter\" that sends messages to the given\n * `parentPort` to be received by a worker channel receiver.\n */\nexport function createReporter<TWorkerChannel extends WorkerChannel>(\n  parentPort: MessagePort | null,\n): WorkerChannelReporter<TWorkerChannel> {\n  if (!parentPort) {\n    throw new Error('parentPart was falsy')\n  }\n\n  return {\n    event: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['event'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const eventReporter: EventReporter = (payload) => {\n          const message: EventMessage = {type: 'event', name, payload}\n          parentPort.postMessage(message)\n        }\n\n        return eventReporter\n      },\n    }),\n    stream: new Proxy({} as WorkerChannelReporter<TWorkerChannel>['stream'], {\n      get: (target, name) => {\n        if (typeof name !== 'string') return target[name as keyof typeof target]\n\n        const streamReporter: StreamReporter = {\n          emit: (payload) => {\n            const message: StreamEmissionMessage = {type: 'emission', name, payload}\n            parentPort.postMessage(message)\n          },\n          end: () => {\n            const message: StreamEndMessage = {type: 'end', name}\n            parentPort.postMessage(message)\n          },\n        }\n\n        return streamReporter\n      },\n    }),\n  }\n}\n","import path from 'path'\nimport {Worker} from 'worker_threads'\nimport readPkgUp from 'read-pkg-up'\nimport {ClientConfig} from '@sanity/client'\nimport {ValidationMarker} from '@sanity/types'\nimport type {\n  ValidateDocumentsWorkerData,\n  ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, WorkerChannelReceiver} from '../../util/workerChannels'\n\nconst DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY = 5\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  maxCustomValidationConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      maxCustomValidationConcurrency:\n        maxCustomValidationConcurrency ?? DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import {isatty} from 'tty'\nimport logSymbols from 'log-symbols'\nimport type {ValidationMarker} from '@sanity/types'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.substring(0, subject.length - 1) : subject\n  }`\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n}).format.bind(Intl.NumberFormat)\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import chalk from 'chalk'\nimport {ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\nimport {DocumentValidationResult, Level, isTty, levelValues} from './util'\nimport {pathToString} from 'sanity'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost: string | null\n  basePath: string\n}\n\ninterface ValidationTree {\n  markers?: Pick<ValidationMarker, 'level' | 'message'>[]\n  children?: Record<string, ValidationTree>\n}\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(' ERROR ')) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(' WARN ')) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(' INFO ')) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * Recursively calculates the max length of all the keys in the given validation\n * tree respecting extra length due to indentation depth. Used to calculate the\n * padding for the rest of the tree.\n */\nconst maxKeyLength = (children: Record<string, ValidationTree> = {}, depth = 0): number => {\n  return Object.entries(children)\n    .map(([key, child]) =>\n      Math.max(key.length + depth * 2, maxKeyLength(child.children, depth + 1)),\n    )\n    .reduce((max, next) => (next > max ? next : max), 0)\n}\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Recursively formats a given tree into a printed user-friendly tree structure\n */\nconst formatTree = (\n  node: Record<string, ValidationTree> = {},\n  paddingLength: number,\n  indent = '',\n): string => {\n  const entries = Object.entries(node)\n\n  return entries\n    .map(([key, child], index) => {\n      const isLast = index === entries.length - 1\n      const nextIndent = `${indent}${isLast ? '  ' : '│ '}`\n      const nested = formatTree(child.children, paddingLength, nextIndent)\n\n      if (!child.markers?.length) {\n        const current = `${indent}${isLast ? '└' : '├'}─ ${key}`\n        return [current, nested].filter(Boolean).join('\\n')\n      }\n\n      const [first, ...rest] = child.markers.slice().sort(compareLevels)\n      const firstPadding = '.'.repeat(paddingLength - indent.length - key.length)\n      const elbow = isLast ? '└' : '├'\n      const firstBullet = logSymbols[first.level]\n      const subsequentPadding = ' '.repeat(paddingLength - indent.length + 2)\n\n      const firstMessage = `${indent}${elbow}─ ${key} ${firstPadding} ${firstBullet} ${first.message}`\n      const subsequentMessages = rest\n        .map(\n          (marker) =>\n            `${nextIndent}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n        )\n        .join('\\n')\n\n      const current = [firstMessage, subsequentMessages].filter(Boolean).join('\\n')\n      return [current, nested].filter(Boolean).join('\\n')\n    })\n    .join('\\n')\n}\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.markers) return ''\n\n  const [first, ...rest] = root.markers.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Converts a set of markers with paths into a tree of markers where the paths\n * are embedded in the tree\n */\nfunction convertToTree(markers: ValidationMarker[]): ValidationTree {\n  const root: ValidationTree = {}\n\n  // add the markers to the tree\n  function addMarker(marker: ValidationMarker, node: ValidationTree = root) {\n    // if we've traversed the whole path\n    if (!marker.path.length) {\n      if (!node.markers) node.markers = [] // ensure markers is defined\n\n      // then add the marker to the front\n      node.markers.push({level: marker.level, message: marker.message})\n      return\n    }\n\n    const [current, ...rest] = marker.path\n    const key = pathToString([current])\n\n    // ensure the current node has children and the next node\n    if (!node.children) node.children = {}\n    if (!(key in node.children)) node.children[key] = {}\n\n    addMarker({...marker, path: rest}, node.children[key])\n  }\n\n  for (const marker of markers) addMarker(marker)\n  return root\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  basePath,\n  documentId,\n  documentType,\n  level,\n  studioHost,\n  markers,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree(markers)\n  const editLink =\n    studioHost &&\n    `${studioHost}${basePath}/intent/edit/id=${encodeURIComponent(\n      documentId,\n    )};type=${encodeURIComponent(documentType)}`\n\n  const documentTypeHeader = isTty ? chalk.bgWhite(` ${documentType} `) : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    editLink ? link(documentId, editLink) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n  const childErrors = formatTree(tree.children, paddingLength)\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import type {BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  DocumentValidationResult,\n  Level,\n  count,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  // Report document count\n  spinner.start('Calculating documents to be validated…')\n  const {documentCount} = await worker.event.loadedDocumentCount()\n\n  // Report export progress\n  const downloadStart = Date.now()\n  spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n  for await (const {downloadedCount} of worker.stream.exportProgress()) {\n    const percentage = percent(downloadedCount / documentCount)\n    spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n  }\n  spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(documentCount, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(documentCount, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / documentCount,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(`Validated ${count(documentCount, 'documents')} ${seconds(validationStart)}`)\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(\n      `${formatDocumentValidation({\n        basePath: workspace.basePath,\n        studioHost: workspace.studioHost,\n        ...result,\n      })}\\n`,\n    )\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {\n    documentId,\n    documentType,\n    markers,\n    revision,\n    level,\n  } of worker.stream.validation()) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (markers.length) {\n      output.print(JSON.stringify({documentId, documentType, revision, level, markers}))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {ValidationMarker} from '@sanity/types'\nimport type {BuiltInValidationReporter} from '../validateAction'\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  const results: Array<{\n    documentId: string\n    documentType: string\n    revision: string\n    level: 'error' | 'warning' | 'info'\n    markers: ValidationMarker[]\n  }> = []\n\n  for await (const {\n    documentId,\n    documentType,\n    markers,\n    revision,\n    level,\n  } of worker.stream.validation()) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    results.push({\n      documentId,\n      documentType,\n      revision,\n      level,\n      markers,\n    })\n  }\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(results))\n\n  return overallLevel\n}\n","import {pretty} from './prettyReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {json} from './jsonReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import type {CliCommandArguments, CliCommandContext, CliOutputter} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport chalk from 'chalk'\nimport type {WorkerChannelReceiver} from '../../util/workerChannels'\nimport type {ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {validateDocuments} from './validateDocuments'\nimport {reporters} from './reporters'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  dataset?: string\n  level?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  yes?: boolean\n  y?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(\n        `${logSymbols.warning} Warning:`,\n      )} This command downloads all documents from a ` +\n        `dataset and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Downloads all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    output.print()\n    output.print(\n      \"Note: As it's currently in beta, we encourage users to report any issues encountered here:\\n\",\n    )\n    output.print('    https://github.com/sanity-io/sanity/issues/5510')\n    output.print()\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig: apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["MessageQueue","constructor","resolver","queue","push","message","value","done","next","length","Promise","resolve","shift","end","isWorkerChannelMessage","type","types","includes","createReceiver","worker","_events","Map","_streams","errors","eventQueue","name","_a","get","has","set","streamQueue","handleMessage","handleError","error","addListener","event","Proxy","target","eventReceiver","race","payload","stream","prop","streamReceiver","dispose","removeListener","terminate","DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY","defaultReporter","_ref","createValidationGenerator","documentId","documentType","markers","revision","level","validation","result","validateDocuments","options","workspace","clientConfig","configPath","dataset","projectId","workDir","process","cwd","reporter","maxCustomValidationConcurrency","rootPkgPath","sync","__dirname","path","Error","workerPath","join","dirname","Worker","workerData","JSON","parse","stringify","env","isTty","isatty","levelValues","warning","info","count","amount","subject","concat","toLocaleString","substring","percent","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","bind","secondFormatter","seconds","startTime","endTime","Date","now","summary","_ref2","infos","valid","warnings","arguments","undefined","levelValue","logSymbols","success","documents","filter","Boolean","levelHeaders","chalk","bold","bgRed","red","bgYellow","yellow","cyan","link","text","url","underline","maxKeyLength","children","depth","Object","entries","map","_ref3","key","child","Math","max","reduce","compareLevels","a","b","formatTree","node","paddingLength","indent","_ref4","index","isLast","nextIndent","nested","current","first","rest","slice","sort","firstPadding","repeat","elbow","firstBullet","subsequentPadding","firstMessage","subsequentMessages","marker","formatRootErrors","root","hasChildren","firstElbow","firstLine","subsequentElbow","restOfLines","convertToTree","addMarker","pathToString","formatDocumentValidation","_ref5","basePath","studioHost","tree","editLink","encodeURIComponent","documentTypeHeader","bgWhite","header","childErrors","rootErrors","pretty","_ref6","output","flags","workspaceLoadStart","spinner","start","loadedWorkspace","succeed","documentCount","loadedDocumentCount","downloadStart","downloadedCount","exportProgress","percentage","referenceIntegrityStart","loadedReferenceIntegrity","validationStart","results","totals","validatedCount","print","localeCompare","overallLevel","ndjson","_ref7","json","_ref8","reporters","validateAction","args","_ref9","apiClient","prompt","extOptions","unattendedMode","yes","y","confirmed","single","default","exitCode","formatter","ListFormat","keys","Number","isInteger","requireUser","requireProject","config"],"mappings":"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"}