{"version":3,"file":"validateAction-vVbalIO6.js","sources":["../../src/_internal/cli/actions/validation/validateDocuments.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/util.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/formatDocumentValidation.ts","../../src/_internal/cli/actions/validation/reporters/prettyReporter/prettyReporter.ts","../../src/_internal/cli/actions/validation/reporters/ndjsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/jsonReporter.ts","../../src/_internal/cli/actions/validation/reporters/index.ts","../../src/_internal/cli/actions/validation/validateAction.ts"],"sourcesContent":["import path from 'path'\nimport {Worker} from 'worker_threads'\nimport readPkgUp from 'read-pkg-up'\nimport {ClientConfig} from '@sanity/client'\nimport {ValidationMarker} from '@sanity/types'\nimport type {\n  ValidateDocumentsWorkerData,\n  ValidationWorkerChannel,\n} from '../../threads/validateDocuments'\nimport {createReceiver, WorkerChannelReceiver} from '../../util/workerChannels'\n\nconst DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY = 5\n\nexport interface ValidateDocumentsOptions<TReturn = unknown> {\n  level?: 'error' | 'warning' | 'info'\n  workspace?: string\n  workDir?: string\n  configPath?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string // override\n  dataset?: string // override\n  maxCustomValidationConcurrency?: number\n  reporter?: (worker: WorkerChannelReceiver<ValidationWorkerChannel>) => TReturn\n}\n\nexport interface DocumentValidationResult {\n  documentId: string\n  documentType: string\n  revision: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nconst defaultReporter = ({stream, dispose}: WorkerChannelReceiver<ValidationWorkerChannel>) => {\n  async function* createValidationGenerator() {\n    for await (const {documentId, documentType, markers, revision, level} of stream.validation()) {\n      const result: DocumentValidationResult = {\n        documentId,\n        documentType,\n        revision,\n        level,\n        markers,\n      }\n\n      yield result\n    }\n\n    await dispose()\n  }\n\n  return createValidationGenerator()\n}\n\nexport function validateDocuments<TReturn>(\n  options: ValidateDocumentsOptions<TReturn> &\n    Required<Pick<ValidateDocumentsOptions<TReturn>, 'reporter'>>,\n): TReturn\nexport function validateDocuments(\n  options: ValidateDocumentsOptions,\n): AsyncIterable<DocumentValidationResult>\nexport function validateDocuments(options: ValidateDocumentsOptions): unknown {\n  const {\n    workspace,\n    clientConfig,\n    configPath,\n    dataset,\n    projectId,\n    workDir = process.cwd(),\n    reporter = defaultReporter,\n    level,\n    maxCustomValidationConcurrency,\n  } = options\n\n  const rootPkgPath = readPkgUp.sync({cwd: __dirname})?.path\n  if (!rootPkgPath) {\n    throw new Error('Could not find root directory for `sanity` package')\n  }\n\n  const workerPath = path.join(\n    path.dirname(rootPkgPath),\n    'lib',\n    '_internal',\n    'cli',\n    'threads',\n    'validateDocuments.js',\n  )\n\n  const worker = new Worker(workerPath, {\n    workerData: {\n      workDir,\n      // removes props in the config that make this object fail to serialize\n      clientConfig: JSON.parse(JSON.stringify(clientConfig)),\n      configPath,\n      workspace,\n      dataset,\n      projectId,\n      level,\n      maxCustomValidationConcurrency:\n        maxCustomValidationConcurrency ?? DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY,\n    } satisfies ValidateDocumentsWorkerData,\n    // eslint-disable-next-line no-process-env\n    env: process.env,\n  })\n\n  return reporter(createReceiver<ValidationWorkerChannel>(worker))\n}\n","import {isatty} from 'tty'\nimport logSymbols from 'log-symbols'\nimport type {ValidationMarker} from '@sanity/types'\n\nexport type Level = ValidationMarker['level']\n\nexport interface DocumentValidationResult {\n  revision: string\n  documentId: string\n  documentType: string\n  level: ValidationMarker['level']\n  markers: ValidationMarker[]\n}\n\nexport const isTty = isatty(1)\nexport const levelValues = {error: 0, warning: 1, info: 2} as const\n\n/**\n * Generates a formatted string that includes a numerical amount and a subject\n * in plural or singular form. Note: the subject must end in `s`\n */\nexport const count = (amount: number, subject: string): string =>\n  `${amount.toLocaleString('en-US')} ${\n    amount === 1 ? subject.substring(0, subject.length - 1) : subject\n  }`\n\n/**\n * Given a decimal, this will return that number formatted as a percentage\n */\nexport const percent = new Intl.NumberFormat('en-US', {\n  style: 'percent',\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n}).format.bind(Intl.NumberFormat)\n\nconst secondFormatter = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 1,\n  maximumFractionDigits: 1,\n})\n\n/**\n * Given a start time in milliseconds, this will output the time elapsed\n * formatted in seconds\n */\nexport const seconds = (startTime: number): string => {\n  const endTime = Date.now()\n  return `(${secondFormatter.format((endTime - startTime) / 1000)}s)`\n}\n\ninterface ValidationTotals {\n  valid: {documents: number}\n  errors: {documents: number; markers: number}\n  warnings: {documents: number; markers: number}\n  infos: {documents: number; markers: number}\n}\n\n/**\n * Outputs summary text given an object of totals. Omits totals depending on the\n * desired validation `level`\n */\nexport const summary = (\n  {errors, infos, valid, warnings}: ValidationTotals,\n  level: Level = 'warning',\n): string => {\n  const levelValue = levelValues[level]\n\n  return [\n    `${logSymbols.success} Valid:    ${count(valid.documents, 'documents')}`,\n    `${logSymbols.error} Errors:   ${count(errors.documents, 'documents')}, ${count(\n      errors.markers,\n      'errors',\n    )}`,\n    levelValue >= levelValues.warning &&\n      `${logSymbols.warning} Warnings: ${count(warnings.documents, 'documents')}, ${count(\n        warnings.markers,\n        'warnings',\n      )}`,\n    levelValue >= levelValues.info &&\n      `${logSymbols.info} Info:     ${count(infos.documents, 'documents')}, ${count(\n        infos.documents,\n        'markers',\n      )}`,\n  ]\n    .filter(Boolean)\n    .join('\\n')\n}\n","import chalk from 'chalk'\nimport {ValidationMarker} from '@sanity/types'\nimport logSymbols from 'log-symbols'\nimport {DocumentValidationResult, Level, isTty, levelValues} from './util'\nimport {pathToString} from 'sanity'\n\nexport interface FormatDocumentValidationOptions extends DocumentValidationResult {\n  studioHost: string | null\n  basePath: string\n}\n\ninterface ValidationTree {\n  markers?: Pick<ValidationMarker, 'level' | 'message'>[]\n  children?: Record<string, ValidationTree>\n}\n\nconst levelHeaders = {\n  error: isTty ? chalk.bold(chalk.bgRed(' ERROR ')) : chalk.red('[ERROR]'),\n  warning: isTty ? chalk.bold(chalk.bgYellow(' WARN ')) : chalk.yellow('[WARN]'),\n  info: isTty ? chalk.bold(chalk.cyan(' INFO ')) : chalk.cyan('[INFO]'),\n}\n/**\n * Creates a terminal hyperlink. Only outputs a hyperlink if the output is\n * determined to be a TTY\n */\nconst link = (text: string, url: string) =>\n  isTty ? `\\u001b]8;;${url}\\u0007${text}\\u001b]8;;\\u0007` : chalk.underline(text)\n\n/**\n * Recursively calculates the max length of all the keys in the given validation\n * tree respecting extra length due to indentation depth. Used to calculate the\n * padding for the rest of the tree.\n */\nconst maxKeyLength = (children: Record<string, ValidationTree> = {}, depth = 0): number => {\n  return Object.entries(children)\n    .map(([key, child]) =>\n      Math.max(key.length + depth * 2, maxKeyLength(child.children, depth + 1)),\n    )\n    .reduce((max, next) => (next > max ? next : max), 0)\n}\n\n/**\n * For sorting markers\n */\nconst compareLevels = <T extends {level: Level; message: string}>(a: T, b: T) =>\n  levelValues[a.level] - levelValues[b.level]\n\n/**\n * Recursively formats a given tree into a printed user-friendly tree structure\n */\nconst formatTree = (\n  node: Record<string, ValidationTree> = {},\n  paddingLength: number,\n  indent = '',\n): string => {\n  const entries = Object.entries(node)\n\n  return entries\n    .map(([key, child], index) => {\n      const isLast = index === entries.length - 1\n      const nextIndent = `${indent}${isLast ? '  ' : '│ '}`\n      const nested = formatTree(child.children, paddingLength, nextIndent)\n\n      if (!child.markers?.length) {\n        const current = `${indent}${isLast ? '└' : '├'}─ ${key}`\n        return [current, nested].filter(Boolean).join('\\n')\n      }\n\n      const [first, ...rest] = child.markers.slice().sort(compareLevels)\n      const firstPadding = '.'.repeat(paddingLength - indent.length - key.length)\n      const elbow = isLast ? '└' : '├'\n      const firstBullet = logSymbols[first.level]\n      const subsequentPadding = ' '.repeat(paddingLength - indent.length + 2)\n\n      const firstMessage = `${indent}${elbow}─ ${key} ${firstPadding} ${firstBullet} ${first.message}`\n      const subsequentMessages = rest\n        .map(\n          (marker) =>\n            `${nextIndent}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n        )\n        .join('\\n')\n\n      const current = [firstMessage, subsequentMessages].filter(Boolean).join('\\n')\n      return [current, nested].filter(Boolean).join('\\n')\n    })\n    .join('\\n')\n}\n\n/**\n * Formats the markers at the root of the validation tree\n */\nconst formatRootErrors = (root: ValidationTree, hasChildren: boolean, paddingLength: number) => {\n  if (!root.markers) return ''\n\n  const [first, ...rest] = root.markers.slice().sort(compareLevels)\n  if (!first) return ''\n\n  const firstElbow = hasChildren ? '│ ' : '└─'\n  const firstPadding = '.'.repeat(paddingLength - 6)\n  const firstLine = `${firstElbow} (root) ${firstPadding} ${logSymbols[first.level]} ${\n    first.message\n  }`\n  const subsequentPadding = ' '.repeat(paddingLength + 2)\n  const subsequentElbow = hasChildren ? '│ ' : '  '\n\n  const restOfLines = rest\n    .map(\n      (marker) =>\n        `${subsequentElbow}${subsequentPadding} ${logSymbols[marker.level]} ${marker.message}`,\n    )\n    .join('\\n')\n  return [firstLine, restOfLines].filter(Boolean).join('\\n')\n}\n\n/**\n * Converts a set of markers with paths into a tree of markers where the paths\n * are embedded in the tree\n */\nfunction convertToTree(markers: ValidationMarker[]): ValidationTree {\n  const root: ValidationTree = {}\n\n  // add the markers to the tree\n  function addMarker(marker: ValidationMarker, node: ValidationTree = root) {\n    // if we've traversed the whole path\n    if (!marker.path.length) {\n      if (!node.markers) node.markers = [] // ensure markers is defined\n\n      // then add the marker to the front\n      node.markers.push({level: marker.level, message: marker.message})\n      return\n    }\n\n    const [current, ...rest] = marker.path\n    const key = pathToString([current])\n\n    // ensure the current node has children and the next node\n    if (!node.children) node.children = {}\n    if (!(key in node.children)) node.children[key] = {}\n\n    addMarker({...marker, path: rest}, node.children[key])\n  }\n\n  for (const marker of markers) addMarker(marker)\n  return root\n}\n\n/**\n * Formats document validation results into a user-friendly tree structure\n */\nexport function formatDocumentValidation({\n  basePath,\n  documentId,\n  documentType,\n  level,\n  studioHost,\n  markers,\n}: FormatDocumentValidationOptions): string {\n  const tree = convertToTree(markers)\n  const editLink =\n    studioHost &&\n    `${studioHost}${basePath}/intent/edit/id=${encodeURIComponent(\n      documentId,\n    )};type=${encodeURIComponent(documentType)}`\n\n  const documentTypeHeader = isTty ? chalk.bgWhite(` ${documentType} `) : `[${documentType}]`\n\n  const header = `${levelHeaders[level]} ${documentTypeHeader} ${\n    editLink ? link(documentId, editLink) : chalk.underline(documentId)\n  }`\n\n  const paddingLength = Math.max(maxKeyLength(tree.children) + 2, 30)\n  const childErrors = formatTree(tree.children, paddingLength)\n  const rootErrors = formatRootErrors(tree, childErrors.length > 0, paddingLength)\n\n  return [header, rootErrors, childErrors].filter(Boolean).join('\\n')\n}\n","import type {BuiltInValidationReporter} from '../../validateAction'\nimport {formatDocumentValidation} from './formatDocumentValidation'\nimport {\n  DocumentValidationResult,\n  Level,\n  count,\n  levelValues,\n  percent,\n  seconds,\n  summary,\n} from './util'\n\n/**\n * Represents the default stylish/pretty reporter\n */\nexport const pretty: BuiltInValidationReporter = async ({output, worker, flags}) => {\n  const workspaceLoadStart = Date.now()\n  // Report workspace loaded\n  const spinner = output\n    .spinner(flags.workspace ? `Loading workspace '${flags.workspace}'…` : 'Loading workspace…')\n    .start()\n\n  const workspace = await worker.event.loadedWorkspace()\n  spinner.succeed(\n    `Loaded workspace '${workspace.name}' using project '${workspace.projectId}' and dataset '${\n      flags.dataset || workspace.dataset\n    }' ${seconds(workspaceLoadStart)}`,\n  )\n\n  // Report document count\n  spinner.start('Calculating documents to be validated…')\n  const {documentCount} = await worker.event.loadedDocumentCount()\n\n  // Report export progress\n  const downloadStart = Date.now()\n  spinner.text = `Downloading ${count(documentCount, 'documents')}…`\n  for await (const {downloadedCount} of worker.stream.exportProgress()) {\n    const percentage = percent(downloadedCount / documentCount)\n    spinner.text = `Downloading ${count(documentCount, 'documents')}… ${percentage}`\n  }\n  spinner.succeed(`Downloaded ${count(documentCount, 'documents')} ${seconds(downloadStart)}`)\n\n  const referenceIntegrityStart = Date.now()\n  spinner.start(`Checking reference existence…`)\n  await worker.event.loadedReferenceIntegrity()\n  spinner.succeed(`Checked all references ${seconds(referenceIntegrityStart)}`)\n\n  // Report validation progress\n  const validationStart = Date.now()\n  spinner.start(`Validating ${count(documentCount, 'documents')}…`)\n\n  const results: DocumentValidationResult[] = []\n\n  const totals = {\n    valid: {documents: 0},\n    errors: {documents: 0, markers: 0},\n    warnings: {documents: 0, markers: 0},\n    infos: {documents: 0, markers: 0},\n  }\n\n  for await (const {validatedCount, ...result} of worker.stream.validation()) {\n    const {markers} = result\n\n    if (markers.length) {\n      results.push(result)\n    }\n\n    const errors = markers.filter((marker) => marker.level === 'error')\n    const warnings = markers.filter((marker) => marker.level === 'warning')\n    const infos = markers.filter((marker) => marker.level === 'info')\n\n    if (!markers.length) {\n      totals.valid.documents += 1\n    }\n\n    if (errors.length) {\n      totals.errors.documents += 1\n      totals.errors.markers += errors.length\n    }\n\n    if (warnings.length) {\n      totals.warnings.documents += 1\n      totals.warnings.markers += warnings.length\n    }\n\n    if (infos.length) {\n      totals.infos.documents += 1\n      totals.infos.markers += infos.length\n    }\n\n    spinner.text =\n      `Validating ${count(documentCount, 'documents')}…\\n\\n` +\n      `Processed ${count(validatedCount, 'documents')} (${percent(\n        validatedCount / documentCount,\n      )}):\\n${summary(totals, flags.level)}`\n  }\n\n  spinner.succeed(`Validated ${count(documentCount, 'documents')} ${seconds(validationStart)}`)\n  output.print(`\\nValidation results:\\n${summary(totals, flags.level)}`)\n\n  results.sort((a, b) => {\n    if (a.level === b.level) return a.documentType.localeCompare(b.documentType)\n    return levelValues[a.level] - levelValues[b.level]\n  })\n\n  let overallLevel: Level = 'info'\n\n  for (const result of results) {\n    if (result.level === 'error') overallLevel = 'error'\n    if (result.level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    output.print(\n      `${formatDocumentValidation({\n        basePath: workspace.basePath,\n        studioHost: workspace.studioHost,\n        ...result,\n      })}\\n`,\n    )\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {BuiltInValidationReporter} from '../validateAction'\n\nexport const ndjson: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  for await (const {\n    documentId,\n    documentType,\n    markers,\n    revision,\n    level,\n  } of worker.stream.validation()) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    if (markers.length) {\n      output.print(JSON.stringify({documentId, documentType, revision, level, markers}))\n    }\n  }\n\n  await worker.dispose()\n\n  return overallLevel\n}\n","import type {ValidationMarker} from '@sanity/types'\nimport type {BuiltInValidationReporter} from '../validateAction'\n\nexport const json: BuiltInValidationReporter = async ({output, worker}) => {\n  let overallLevel: 'error' | 'warning' | 'info' = 'info'\n\n  const results: Array<{\n    documentId: string\n    documentType: string\n    revision: string\n    level: 'error' | 'warning' | 'info'\n    markers: ValidationMarker[]\n  }> = []\n\n  for await (const {\n    documentId,\n    documentType,\n    markers,\n    revision,\n    level,\n  } of worker.stream.validation()) {\n    if (level === 'error') overallLevel = 'error'\n    if (level === 'warning' && overallLevel !== 'error') overallLevel = 'warning'\n\n    results.push({\n      documentId,\n      documentType,\n      revision,\n      level,\n      markers,\n    })\n  }\n\n  await worker.dispose()\n\n  output.print(JSON.stringify(results))\n\n  return overallLevel\n}\n","import {pretty} from './prettyReporter'\nimport {ndjson} from './ndjsonReporter'\nimport {json} from './jsonReporter'\n\nexport const reporters = {pretty, ndjson, json}\n","import type {CliCommandArguments, CliCommandContext, CliOutputter} from '@sanity/cli'\nimport logSymbols from 'log-symbols'\nimport chalk from 'chalk'\nimport type {WorkerChannelReceiver} from '../../util/workerChannels'\nimport type {ValidationWorkerChannel} from '../../threads/validateDocuments'\nimport {validateDocuments} from './validateDocuments'\nimport {reporters} from './reporters'\n\ninterface ValidateFlags {\n  workspace?: string\n  format?: string\n  dataset?: string\n  level?: 'error' | 'warning' | 'info'\n  'max-custom-validation-concurrency'?: number\n  yes?: boolean\n  y?: boolean\n}\n\nexport type BuiltInValidationReporter = (options: {\n  output: CliOutputter\n  worker: WorkerChannelReceiver<ValidationWorkerChannel>\n  flags: ValidateFlags\n}) => Promise<'error' | 'warning' | 'info'>\n\nexport default async function validateAction(\n  args: CliCommandArguments<ValidateFlags>,\n  {apiClient, workDir, output, prompt}: CliCommandContext,\n): Promise<void> {\n  const flags = args.extOptions\n  const unattendedMode = Boolean(flags.yes || flags.y)\n\n  if (!unattendedMode) {\n    output.print(\n      `${chalk.yellow(\n        `${logSymbols.warning} Warning:`,\n      )} This command downloads all documents from a ` +\n        `dataset and processes them through your local schema within a ` +\n        `simulated browser environment.\\n`,\n    )\n    output.print(`Potential pitfalls:\\n`)\n    output.print(\n      `- Downloads all documents locally (excluding assets). Large datasets may require more resources.`,\n    )\n    output.print(\n      `- Executes all custom validation functions. Some functions may need to be refactored for compatibility.`,\n    )\n    output.print(\n      `- Not all standard browser features are available and may cause issues while loading your Studio.`,\n    )\n    output.print(\n      `- Adheres to document permissions. Ensure this account can see all desired documents.`,\n    )\n    output.print()\n    output.print(\n      \"Note: As it's currently in beta, we encourage users to report any issues encountered here:\\n\",\n    )\n    output.print('    https://github.com/sanity-io/sanity/issues/5510')\n    output.print()\n\n    const confirmed = await prompt.single<boolean>({\n      type: 'confirm',\n      message: `Are you sure you want to continue?`,\n      default: true,\n    })\n\n    if (!confirmed) {\n      output.print('User aborted')\n      process.exitCode = 1\n      return\n    }\n  }\n\n  if (flags.format && !(flags.format in reporters)) {\n    const formatter = new Intl.ListFormat('en-US', {\n      style: 'long',\n      type: 'conjunction',\n    })\n    throw new Error(\n      `Did not recognize format '${flags.format}'. Available formats are ${formatter.format(\n        Object.keys(reporters).map((key) => `'${key}'`),\n      )}`,\n    )\n  }\n\n  const level = flags.level || 'warning'\n\n  if (level !== 'error' && level !== 'warning' && level !== 'info') {\n    throw new Error(`Invalid level. Available levels are 'error', 'warning', and 'info'.`)\n  }\n\n  const maxCustomValidationConcurrency = flags['max-custom-validation-concurrency']\n  if (\n    maxCustomValidationConcurrency &&\n    typeof maxCustomValidationConcurrency !== 'number' &&\n    !Number.isInteger(maxCustomValidationConcurrency)\n  ) {\n    throw new Error(`'--max-custom-validation-concurrency' must be an integer.`)\n  }\n\n  const overallLevel = await validateDocuments({\n    workspace: flags.workspace,\n    dataset: flags.dataset,\n    clientConfig: apiClient({\n      requireUser: true,\n      requireProject: false, // we'll get this from the workspace\n    }).config(),\n    workDir,\n    level,\n    maxCustomValidationConcurrency,\n    reporter: (worker) => {\n      const reporter =\n        flags.format && flags.format in reporters\n          ? reporters[flags.format as keyof typeof reporters]\n          : reporters.pretty\n\n      return reporter({output, worker, flags})\n    },\n  })\n\n  process.exitCode = overallLevel === 'error' ? 1 : 0\n}\n"],"names":["DEFAULT_MAX_CUSTOM_VALIDATION_CONCURRENCY","defaultReporter","_ref","stream","dispose","createValidationGenerator","documentId","documentType","markers","revision","level","validation","result","validateDocuments","options","_a","workspace","clientConfig","configPath","dataset","projectId","workDir","process","cwd","reporter","maxCustomValidationConcurrency","rootPkgPath","sync","__dirname","path","Error","workerPath","join","default","dirname","worker","Worker","workerData","JSON","parse","stringify","env","createReceiver","isTty","isatty","levelValues","error","warning","info","count","amount","subject","concat","toLocaleString","substring","length","percent","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","bind","secondFormatter","seconds","startTime","endTime","Date","now","summary","_ref2","errors","infos","valid","warnings","arguments","undefined","levelValue","logSymbols","success","documents","filter","Boolean","levelHeaders","chalk","bold","bgRed","red","bgYellow","yellow","cyan","link","text","url","underline","maxKeyLength","children","depth","Object","entries","map","_ref3","key","child","Math","max","reduce","next","compareLevels","a","b","formatTree","node","paddingLength","indent","_ref4","index","isLast","nextIndent","nested","current","first","rest","slice","sort","firstPadding","repeat","elbow","firstBullet","subsequentPadding","firstMessage","message","subsequentMessages","marker","formatRootErrors","root","hasChildren","firstElbow","firstLine","subsequentElbow","restOfLines","convertToTree","addMarker","push","pathToString","formatDocumentValidation","_ref5","basePath","studioHost","tree","editLink","encodeURIComponent","documentTypeHeader","bgWhite","header","childErrors","rootErrors","pretty","_ref6","output","flags","workspaceLoadStart","spinner","start","event","loadedWorkspace","succeed","name","documentCount","loadedDocumentCount","downloadStart","downloadedCount","exportProgress","percentage","referenceIntegrityStart","loadedReferenceIntegrity","validationStart","results","totals","validatedCount","print","localeCompare","overallLevel","ndjson","_ref7","json","_ref8","reporters","validateAction","args","_ref9","apiClient","prompt","extOptions","unattendedMode","yes","y","confirmed","single","type","exitCode","formatter","ListFormat","keys","Number","isInteger","requireUser","requireProject","config"],"mappings":"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"}