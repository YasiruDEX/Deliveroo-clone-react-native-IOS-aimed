{"version":3,"file":"validateDocuments.js","sources":["../../../../src/_internal/cli/threads/validateDocuments.ts"],"sourcesContent":["import {isMainThread, parentPort, workerData as _workerData} from 'worker_threads'\nimport readline from 'readline'\nimport {Readable} from 'stream'\nimport os from 'os'\nimport fs from 'fs'\nimport path from 'path'\nimport {\n  type ClientConfig,\n  type SanityClient,\n  type SanityDocument,\n  createClient,\n} from '@sanity/client'\nimport {type ValidationContext, type ValidationMarker, isReference} from '@sanity/types'\nimport {getStudioConfig} from '../util/getStudioConfig'\nimport {mockBrowserEnvironment} from '../util/mockBrowserEnvironment'\nimport {\n  createReporter,\n  type WorkerChannel,\n  type WorkerChannelEvent,\n  type WorkerChannelStream,\n} from '../util/workerChannels'\nimport {isRecord, validateDocument} from 'sanity'\n\nconst MAX_VALIDATION_CONCURRENCY = 100\nconst DOCUMENT_VALIDATION_TIMEOUT = 30000\nconst REFERENCE_INTEGRITY_BATCH_SIZE = 100\n\ninterface AvailabilityResponse {\n  omitted: {id: string; reason: 'existence' | 'permission'}[]\n}\n\nexport interface ValidateDocumentsWorkerData {\n  workDir: string\n  configPath?: string\n  workspace?: string\n  clientConfig?: Partial<ClientConfig>\n  projectId?: string\n  dataset?: string\n  level?: ValidationMarker['level']\n  maxCustomValidationConcurrency?: number\n}\n\nexport type ValidationWorkerChannel = WorkerChannel<{\n  loadedWorkspace: WorkerChannelEvent<{\n    name: string\n    projectId: string\n    dataset: string\n    studioHost: string | null\n    basePath: string\n  }>\n  loadedDocumentCount: WorkerChannelEvent<{documentCount: number}>\n  exportProgress: WorkerChannelStream<{downloadedCount: number; documentCount: number}>\n  loadedReferenceIntegrity: WorkerChannelEvent\n  validation: WorkerChannelStream<{\n    validatedCount: number\n    documentId: string\n    documentType: string\n    revision: string\n    level: ValidationMarker['level']\n    markers: ValidationMarker[]\n  }>\n}>\n\nconst {\n  clientConfig,\n  workDir,\n  workspace: workspaceName,\n  configPath,\n  dataset,\n  projectId,\n  level,\n  maxCustomValidationConcurrency,\n} = _workerData as ValidateDocumentsWorkerData\n\nif (isMainThread || !parentPort) {\n  throw new Error('This module must be run as a worker thread')\n}\n\nconst levelValues = {error: 0, warning: 1, info: 2} as const\n\nconst report = createReporter<ValidationWorkerChannel>(parentPort)\n\nconst getReferenceIds = (value: unknown) => {\n  const ids = new Set<string>()\n\n  function traverse(node: unknown) {\n    if (isReference(node)) {\n      ids.add(node._ref)\n      return\n    }\n\n    if (typeof node === 'object' && node) {\n      // Note: this works for arrays too\n      for (const item of Object.values(node)) {\n        traverse(item)\n      }\n    }\n  }\n\n  traverse(value)\n\n  return ids\n}\n\nconst idRegex = /^[^-][A-Z0-9._-]*$/i\n\n// during testing, the `doc` endpoint 502'ed if given an invalid ID\nconst isValidId = (id: unknown) => typeof id === 'string' && idRegex.test(id)\n\nasync function* readerGenerator(reader: ReadableStreamDefaultReader<Uint8Array>) {\n  while (true) {\n    const {value, done} = await reader.read()\n    if (value) yield value\n    if (done) return\n  }\n}\n\nvalidateDocuments()\n\nasync function loadWorkspace() {\n  const workspaces = await getStudioConfig({basePath: workDir, configPath})\n\n  if (!workspaces.length) {\n    throw new Error(`Configuration did not return any workspaces.`)\n  }\n\n  let _workspace\n  if (workspaceName) {\n    _workspace = workspaces.find((w) => w.name === workspaceName)\n    if (!_workspace) {\n      throw new Error(`Could not find any workspaces with name \\`${workspaceName}\\``)\n    }\n  } else {\n    if (workspaces.length !== 1) {\n      throw new Error(\n        \"Multiple workspaces found. Please specify which workspace to use with '--workspace'.\",\n      )\n    }\n    _workspace = workspaces[0]\n  }\n  const workspace = _workspace\n\n  const client = createClient({\n    ...clientConfig,\n    dataset: dataset || workspace.dataset,\n    projectId: projectId || workspace.projectId,\n    // we set this explictly to true because the default client configuration\n    // from the CLI comes configured with `useProjectHostname: false` when\n    // `requireProject` is set to false\n    useProjectHostname: true,\n    // we set this explictly to true because we pass in a token via the\n    // `clientConfiguration` object and also mock a browser environment in\n    // this worker which triggers the browser warning\n    ignoreBrowserTokenWarning: true,\n    requestTagPrefix: 'sanity.cli.validate',\n  }).config({apiVersion: 'v2021-03-25'})\n\n  let studioHost\n  try {\n    const project = await client.projects.getById(projectId || workspace.projectId)\n    studioHost = project.metadata.externalStudioHost || project.studioHost\n  } catch {\n    // no big deal if we fail to get the studio host\n    studioHost = null\n  }\n\n  report.event.loadedWorkspace({\n    projectId: workspace.projectId,\n    dataset: workspace.dataset,\n    name: workspace.name,\n    studioHost,\n    basePath: workspace.basePath,\n  })\n\n  return {workspace, client}\n}\n\nasync function downloadDocuments(client: SanityClient) {\n  const exportUrl = new URL(client.getUrl(`/data/export/${client.config().dataset}`, false))\n\n  const documentCount = await client.fetch('length(*)')\n  report.event.loadedDocumentCount({documentCount})\n\n  const {token} = client.config()\n  const response = await fetch(exportUrl, {\n    headers: new Headers({\n      ...(token && {Authorization: `Bearer ${token}`}),\n    }),\n  })\n\n  const reader = response.body?.getReader()\n  if (!reader) throw new Error('Could not get reader from response body.')\n\n  const lines = readline.createInterface({input: Readable.from(readerGenerator(reader))})\n\n  let downloadedCount = 0\n  const referencedIds = new Set<string>()\n  const documentIds = new Set<string>()\n\n  // Note: we stream the export to a file and then re-read from that file to\n  // make this less memory intensive.\n  // this is a similar pattern to the import/export CLI commands\n  const slugDate = new Date()\n    .toISOString()\n    .replace(/[^a-z0-9]/gi, '-')\n    .toLowerCase()\n  const tempOutputFile = path.join(os.tmpdir(), `sanity-validate-${slugDate}.ndjson`)\n  const outputStream = fs.createWriteStream(tempOutputFile)\n\n  for await (const line of lines) {\n    const document = JSON.parse(line) as SanityDocument\n    documentIds.add(document._id)\n    for (const referenceId of getReferenceIds(document)) {\n      referencedIds.add(referenceId)\n    }\n\n    outputStream.write(`${line}\\n`)\n\n    downloadedCount++\n    report.stream.exportProgress.emit({downloadedCount, documentCount})\n  }\n\n  await new Promise<void>((resolve, reject) =>\n    outputStream.close((err) => (err ? reject(err) : resolve())),\n  )\n\n  async function* getDocuments() {\n    const rl = readline.createInterface({input: fs.createReadStream(tempOutputFile)})\n    for await (const line of rl) {\n      if (line) {\n        yield JSON.parse(line) as SanityDocument\n      }\n    }\n\n    rl.close()\n  }\n\n  report.stream.exportProgress.end()\n\n  return {getDocuments, documentIds, referencedIds, tempOutputFile}\n}\n\ninterface CheckReferenceExistenceOptions {\n  client: SanityClient\n  referencedIds: Set<string>\n  documentIds: Set<string>\n}\n\nasync function checkReferenceExistence({\n  client,\n  documentIds,\n  referencedIds: _referencedIds,\n}: CheckReferenceExistenceOptions) {\n  const existingIds = new Set(documentIds)\n  const idsToCheck = Array.from(_referencedIds)\n    .filter((id) => !existingIds.has(id) && isValidId(id))\n    .sort()\n\n  const batches = idsToCheck.reduce<string[][]>(\n    (acc, next, index) => {\n      const batchIndex = Math.floor(index / REFERENCE_INTEGRITY_BATCH_SIZE)\n      const batch = acc[batchIndex]\n      batch.push(next)\n      return acc\n    },\n    Array.from<string[]>({\n      length: Math.ceil(idsToCheck.length / REFERENCE_INTEGRITY_BATCH_SIZE),\n    }).fill([]),\n  )\n\n  for (const batch of batches) {\n    const {omitted} = await client.request<AvailabilityResponse>({\n      uri: client.getDataUrl('doc', batch.join(',')),\n      json: true,\n      query: {excludeContent: 'true'},\n      tag: 'documents-availability',\n    })\n\n    const omittedIds = omitted.reduce<Record<string, 'existence' | 'permission'>>((acc, next) => {\n      acc[next.id] = next.reason\n      return acc\n    }, {})\n\n    for (const id of batch) {\n      // unless the document ID is in the `omitted` object explictly due to\n      // the reason `'existence'`, then it should exist\n      if (omittedIds[id] !== 'existence') {\n        existingIds.add(id)\n      }\n    }\n  }\n  report.event.loadedReferenceIntegrity()\n\n  return {existingIds}\n}\n\nasync function validateDocuments() {\n  // note: this is dynamically imported because this module is ESM only and this\n  // file gets compiled to CJS at this time\n  const {default: pMap} = await import('p-map')\n\n  const cleanup = mockBrowserEnvironment(workDir)\n\n  let tempFile: string | undefined\n\n  try {\n    const {client, workspace} = await loadWorkspace()\n    const {getDocuments, documentIds, referencedIds, tempOutputFile} =\n      await downloadDocuments(client)\n    const {existingIds} = await checkReferenceExistence({client, referencedIds, documentIds})\n    tempFile = tempOutputFile\n\n    const getClient = <TOptions extends Partial<ClientConfig>>(options: TOptions) =>\n      client.withConfig(options)\n\n    const getDocumentExists: ValidationContext['getDocumentExists'] = ({id}) =>\n      Promise.resolve(existingIds.has(id))\n\n    const getLevel = (markers: ValidationMarker[]) => {\n      let foundWarning = false\n      for (const marker of markers) {\n        if (marker.level === 'error') return 'error'\n        if (marker.level === 'warning') foundWarning = true\n      }\n\n      if (foundWarning) return 'warning'\n      return 'info'\n    }\n\n    let validatedCount = 0\n\n    const validate = async (document: SanityDocument) => {\n      let markers: ValidationMarker[]\n\n      try {\n        const timeout = Symbol('timeout')\n\n        const result = await Promise.race([\n          validateDocument({\n            document,\n            workspace,\n            getClient,\n            getDocumentExists,\n            environment: 'cli',\n            maxCustomValidationConcurrency,\n          }),\n          new Promise<typeof timeout>((resolve) =>\n            setTimeout(() => resolve(timeout), DOCUMENT_VALIDATION_TIMEOUT),\n          ),\n        ])\n\n        if (result === timeout) {\n          throw new Error(\n            `Document '${document._id}' failed to validate within ${DOCUMENT_VALIDATION_TIMEOUT}ms.`,\n          )\n        }\n\n        markers = result\n          // remove deprecated `item` from the marker\n          .map(({item, ...marker}) => marker)\n          // filter out unwanted levels\n          .filter((marker) => {\n            const markerValue = levelValues[marker.level]\n            const flagLevelValue =\n              levelValues[level as keyof typeof levelValues] ?? levelValues.info\n            return markerValue <= flagLevelValue\n          })\n      } catch (err) {\n        const errorMessage =\n          isRecord(err) && typeof err.message === 'string' ? err.message : 'Unknown error'\n\n        const message = `Exception occurred while validating value: ${errorMessage}`\n\n        markers = [\n          {\n            message,\n            level: 'error',\n            path: [],\n          },\n        ]\n      }\n\n      validatedCount++\n\n      report.stream.validation.emit({\n        documentId: document._id,\n        documentType: document._type,\n        revision: document.rev,\n        markers,\n        validatedCount,\n        level: getLevel(markers),\n      })\n    }\n\n    await pMap(getDocuments(), validate, {concurrency: MAX_VALIDATION_CONCURRENCY})\n\n    report.stream.validation.end()\n  } finally {\n    cleanup()\n\n    // eslint-disable-next-line no-sync\n    if (tempFile && fs.existsSync(tempFile)) {\n      await fs.promises.rm(tempFile)\n    }\n  }\n}\n"],"names":["MAX_VALIDATION_CONCURRENCY","DOCUMENT_VALIDATION_TIMEOUT","REFERENCE_INTEGRITY_BATCH_SIZE","clientConfig","workDir","workspace","workspaceName","configPath","dataset","projectId","level","maxCustomValidationConcurrency","_workerData","isMainThread","parentPort","Error","levelValues","error","warning","info","report","createReporter","getReferenceIds","value","ids","Set","traverse","node","isReference","add","_ref","item","Object","values","idRegex","isValidId","id","test","readerGenerator","reader","done","read","validateDocuments","loadWorkspace","workspaces","getStudioConfig","basePath","length","_workspace","find","w","name","concat","client","createClient","useProjectHostname","ignoreBrowserTokenWarning","requestTagPrefix","config","apiVersion","studioHost","project","projects","getById","metadata","externalStudioHost","event","loadedWorkspace","downloadDocuments","_a","exportUrl","URL","getUrl","documentCount","fetch","loadedDocumentCount","token","response","headers","Headers","Authorization","body","getReader","lines","readline","createInterface","input","Readable","from","downloadedCount","referencedIds","documentIds","slugDate","Date","toISOString","replace","toLowerCase","tempOutputFile","path","join","os","tmpdir","outputStream","fs","createWriteStream","line","document","JSON","parse","_id","referenceId","write","stream","exportProgress","emit","Promise","resolve","reject","close","err","getDocuments","rl","createReadStream","end","checkReferenceExistence","_referencedIds","existingIds","idsToCheck","Array","filter","has","sort","batches","reduce","acc","next","index","batchIndex","Math","floor","batch","push","ceil","fill","omitted","request","uri","getDataUrl","json","query","excludeContent","tag","omittedIds","reason","loadedReferenceIntegrity","default","pMap","cleanup","mockBrowserEnvironment","tempFile","getClient","options","withConfig","getDocumentExists","_ref2","getLevel","markers","foundWarning","marker","validatedCount","validate","timeout","Symbol","result","race","validateDocument","environment","setTimeout","map","_ref3","markerValue","flagLevelValue","errorMessage","isRecord","message","validation","documentId","documentType","_type","revision","rev","concurrency","existsSync","promises","rm"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA,MAAMA,0BAA6B,GAAA,GAAA;AACnC,MAAMC,2BAA8B,GAAA,GAAA;AACpC,MAAMC,8BAAiC,GAAA,GAAA;AAsCvC,MAAM;EACJC,YAAA;EACAC,OAAA;EACAC,SAAW,EAAAC,aAAA;EACXC,UAAA;EACAC,OAAA;EACAC,SAAA;EACAC,KAAA;EACAC;AACF,CAAI,GAAAC,yBAAA;AAEJ,IAAIC,cAAA,CAAAA,YAAA,IAAgB,CAACC,cAAAA,CAAAA,UAAY,EAAA;EACzB,MAAA,IAAIC,MAAM,4CAA4C,CAAA;AAC9D;AAEA,MAAMC,cAAc;EAACC,KAAA,EAAO;EAAGC,OAAS,EAAA,CAAA;EAAGC,MAAM;CAAC;AAElD,MAAMC,MAAA,GAASC,cAAAA,CAAAA,eAAwCP,cAAAA,CAAAA,UAAU,CAAA;AAEjE,MAAMQ,eAAA,GAAmBC,KAAmB,IAAA;EACpC,MAAAC,GAAA,GAAA,mBAAUC,GAAY,EAAA;EAE5B,SAASC,SAASC,IAAe,EAAA;IAC3B,IAAAC,KAAAA,CAAAA,WAAA,CAAYD,IAAI,CAAG,EAAA;MACjBH,GAAA,CAAAK,GAAA,CAAIF,KAAKG,IAAI,CAAA;MACjB;IACF;IAEI,IAAA,OAAOH,IAAS,KAAA,QAAA,IAAYA,IAAM,EAAA;MAEpC,KAAA,MAAWI,IAAQ,IAAAC,MAAA,CAAOC,MAAO,CAAAN,IAAI,CAAG,EAAA;QACtCD,QAAA,CAASK,IAAI,CAAA;MACf;IACF;EACF;EAEAL,QAAA,CAASH,KAAK,CAAA;EAEP,OAAAC,GAAA;AACT,CAAA;AAEA,MAAMU,OAAU,GAAA,qBAAA;AAGhB,MAAMC,SAAA,GAAaC,EAAgB,IAAA,OAAOA,OAAO,QAAY,IAAAF,OAAA,CAAQG,KAAKD,EAAE,CAAA;AAE5E,gBAAgBE,gBAAgBC,MAAiD,EAAA;EAC/E,OAAO,IAAM,EAAA;IACX,MAAM;MAAChB,KAAO;MAAAiB;IAAA,CAAQ,GAAA,MAAMD,OAAOE,IAAK,CAAA,CAAA;IACpC,IAAAlB,KAAA,EAAa,MAAAA,KAAA;IACb,IAAAiB,IAAA,EAAM;EACZ;AACF;AAEAE,iBAAkB,EAAA;AAElB,eAAeC,aAAgBA,CAAA,EAAA;EAC7B,MAAMC,aAAa,MAAMC,+BAAA,CAAgB;IAACC,QAAU,EAAA1C,OAAA;IAASG;GAAW,CAAA;EAEpE,IAAA,CAACqC,WAAWG,MAAQ,EAAA;IAChB,MAAA,IAAIhC,MAAM,8CAA8C,CAAA;EAChE;EAEI,IAAAiC,UAAA;EACJ,IAAI1C,aAAe,EAAA;IACjB0C,UAAA,GAAaJ,WAAWK,IAAK,CAACC,CAAM,IAAAA,CAAA,CAAEC,SAAS7C,aAAa,CAAA;IAC5D,IAAI,CAAC0C,UAAY,EAAA;MACf,MAAM,IAAIjC,KAAA,CAAM,2CAA6C,CAAAqC,MAAA,CAAA9C,aAAA,EAAa,GAAI,CAAA,CAAA;IAChF;EAAA,CACK,MAAA;IACD,IAAAsC,UAAA,CAAWG,WAAW,CAAG,EAAA;MAC3B,MAAM,IAAIhC,KAAA,CACR,sFAAA,CACF;IACF;IACAiC,UAAA,GAAaJ,WAAW,CAAC,CAAA;EAC3B;EACA,MAAMvC,SAAY,GAAA2C,UAAA;EAElB,MAAMK,WAASC,MAAAA,CAAAA,YAAa,CAAA;IAC1B,GAAGnD,YAAA;IACHK,OAAA,EAASA,WAAWH,SAAU,CAAAG,OAAA;IAC9BC,SAAA,EAAWA,aAAaJ,SAAU,CAAAI,SAAA;IAAA;IAAA;IAAA;IAIlC8C,kBAAoB,EAAA,IAAA;IAAA;IAAA;IAAA;IAIpBC,yBAA2B,EAAA,IAAA;IAC3BC,gBAAkB,EAAA;EACnB,CAAA,CAAE,CAAAC,MAAA,CAAO;IAACC,UAAA,EAAY;EAAc,CAAA,CAAA;EAEjC,IAAAC,UAAA;EACA,IAAA;IACF,MAAMC,UAAU,MAAMR,QAAA,CAAOS,SAASC,OAAQ,CAAAtD,SAAA,IAAaJ,UAAUI,SAAS,CAAA;IACjEmD,UAAA,GAAAC,OAAA,CAAQG,QAAS,CAAAC,kBAAA,IAAsBJ,OAAQ,CAAAD,UAAA;EAAA,CACtD,CAAA,MAAA;IAEOA,UAAA,GAAA,IAAA;EACf;EAEAxC,MAAA,CAAO8C,MAAMC,eAAgB,CAAA;IAC3B1D,WAAWJ,SAAU,CAAAI,SAAA;IACrBD,SAASH,SAAU,CAAAG,OAAA;IACnB2C,MAAM9C,SAAU,CAAA8C,IAAA;IAChBS,UAAA;IACAd,UAAUzC,SAAU,CAAAyC;EAAA,CACrB,CAAA;EAEM,OAAA;IAACzC;IAAWgD,MAAAA,EAAAA;GAAM;AAC3B;AAEA,eAAee,kBAAkBf,MAAsB,EAAA;EAjLvD,IAAAgB,EAAA;EAkLQ,MAAAC,SAAA,GAAY,IAAIC,GAAA,CAAIlB,MAAO,CAAAmB,MAAA,CAAO,eAAgB,CAAApB,MAAA,CAAAC,MAAA,CAAOK,MAAO,CAAA,CAAA,CAAElD,OAAW,CAAA,EAAA,KAAK,CAAC,CAAA;EAEzF,MAAMiE,aAAgB,GAAA,MAAMpB,MAAO,CAAAqB,KAAA,CAAM,WAAW,CAAA;EACpDtD,MAAA,CAAO8C,KAAM,CAAAS,mBAAA,CAAoB;IAACF;EAAc,CAAA,CAAA;EAEhD,MAAM;IAACG;EAAA,CAAS,GAAAvB,MAAA,CAAOK,MAAO,CAAA,CAAA;EACxB,MAAAmB,QAAA,GAAW,MAAMH,KAAA,CAAMJ,SAAW,EAAA;IACtCQ,OAAA,EAAS,IAAIC,OAAQ,CAAA;MACnB,IAAIH,KAAA,IAAS;QAACI,aAAA,EAAe,UAAU5B,MAAO,CAAAwB,KAAA;MAAA,CAAA;IAAA,CAC/C;EAAA,CACF,CAAA;EAEK,MAAArC,MAAA,GAAA,CAAS8B,EAAS,GAAAQ,QAAA,CAAAI,IAAA,KAAT,IAAe,GAAA,KAAA,CAAA,GAAAZ,EAAA,CAAAa,SAAA,EAAA;EAC9B,IAAI,CAAC3C,MAAA,EAAc,MAAA,IAAIxB,MAAM,0CAA0C,CAAA;EAEjE,MAAAoE,KAAA,GAAQC,iBAAAA,CAAAA,OAAS,CAAAC,eAAA,CAAgB;IAACC,KAAA,EAAOC,eAAS,CAAAC,IAAA,CAAKlD,eAAgB,CAAAC,MAAM,CAAC;EAAE,CAAA,CAAA;EAEtF,IAAIkD,eAAkB,GAAA,CAAA;EAChB,MAAAC,aAAA,GAAA,mBAAoBjE,GAAY,EAAA;EAChC,MAAAkE,WAAA,GAAA,mBAAkBlE,GAAY,EAAA;EAK9B,MAAAmE,QAAA,GAAA,EAAA,eAAe,IAAAC,IAAA,CAAA,CAClB,EAAAC,WAAA,CAAA,EACAC,OAAQ,CAAA,aAAA,EAAe,GAAG,CAAA,CAC1BC,WAAY,EAAA;EACT,MAAAC,cAAA,GAAiBC,aAAAA,CAAAA,QAAKC,IAAK,CAAAC,mBAAA,CAAGC,QAAU,EAAA,kBAAA,CAAmBjD,iBAAQ,SAAS,CAAA,CAAA;EAC5E,MAAAkD,YAAA,GAAeC,WAAAA,CAAAA,OAAG,CAAAC,iBAAA,CAAkBP,cAAc,CAAA;EAExD,WAAA,MAAiBQ,QAAQtB,KAAO,EAAA;IACxB,MAAAuB,QAAA,GAAWC,IAAK,CAAAC,KAAA,CAAMH,IAAI,CAAA;IACpBd,WAAA,CAAA9D,GAAA,CAAI6E,SAASG,GAAG,CAAA;IACjB,KAAA,MAAAC,WAAA,IAAexF,eAAgB,CAAAoF,QAAQ,CAAG,EAAA;MACnDhB,aAAA,CAAc7D,IAAIiF,WAAW,CAAA;IAC/B;IAEaR,YAAA,CAAAS,KAAA,CAAM,EAAG,CAAA3D,MAAA,CAAAqD,IAAA,EAAI,IAAI,CAAA,CAAA;IAE9BhB,eAAA,EAAA;IACArE,MAAA,CAAO4F,OAAOC,cAAe,CAAAC,IAAA,CAAK;MAACzB,eAAA;MAAiBhB;KAAc,CAAA;EACpE;EAEA,MAAM,IAAI0C,OAAA,CAAc,CAACC,OAAA,EAASC,MAChC,KAAAf,YAAA,CAAagB,KAAM,CAACC,GAAS,IAAAA,GAAA,GAAMF,MAAO,CAAAE,GAAG,CAAI,GAAAH,OAAA,CAAA,CAAU,CAAA,CAC7D;EAEA,gBAAgBI,YAAeA,CAAA,EAAA;IACvB,MAAAC,EAAA,GAAKrC,0BAASC,eAAgB,CAAA;MAACC,OAAOiB,WAAAA,CAAAA,OAAG,CAAAmB,gBAAA,CAAiBzB,cAAc;IAAA,CAAE,CAAA;IAChF,WAAA,MAAiBQ,QAAQgB,EAAI,EAAA;MAC3B,IAAIhB,IAAM,EAAA;QACF,MAAAE,IAAA,CAAKC,MAAMH,IAAI,CAAA;MACvB;IACF;IAEAgB,EAAA,CAAGH,KAAM,CAAA,CAAA;EACX;EAEOlG,MAAA,CAAA4F,MAAA,CAAOC,eAAeU,GAAI,EAAA;EAEjC,OAAO;IAACH,YAAA;IAAc7B,WAAa;IAAAD,aAAA;IAAeO;EAAc,CAAA;AAClE;AAQA,eAAe2B,uBAAwBA,CAAA9F,IAAA,EAIJ;EAAA,IAJI;IACrCuB,MAAA;IACAsC,WAAA;IACAD,aAAe,EAAAmC;EACjB,CAAmC,GAAA/F,IAAA;EAC3B,MAAAgG,WAAA,GAAc,IAAIrG,GAAA,CAAIkE,WAAW,CAAA;EACvC,MAAMoC,aAAaC,KAAM,CAAAxC,IAAA,CAAKqC,cAAc,CAAA,CACzCI,OAAQ7F,EAAA,IAAO,CAAC0F,WAAA,CAAYI,IAAI9F,EAAE,CAAA,IAAKD,UAAUC,EAAE,CAAC,EACpD+F,IAAK,EAAA;EAER,MAAMC,UAAUL,UAAW,CAAAM,MAAA,CACzB,CAACC,GAAK,EAAAC,IAAA,EAAMC,KAAU,KAAA;IACpB,MAAMC,UAAa,GAAAC,IAAA,CAAKC,KAAM,CAAAH,KAAA,GAAQtI,8BAA8B,CAAA;IAC9D,MAAA0I,KAAA,GAAQN,IAAIG,UAAU,CAAA;IAC5BG,KAAA,CAAMC,KAAKN,IAAI,CAAA;IACR,OAAAD,GAAA;EACT,CAAA,EACAN,MAAMxC,IAAe,CAAA;IACnBzC,MAAQ,EAAA2F,IAAA,CAAKI,IAAK,CAAAf,UAAA,CAAWhF,SAAS7C,8BAA8B;EAAA,CACrE,CAAA,CAAE6I,IAAK,CAAA,EAAE,CAAA,CACZ;EAEA,KAAA,MAAWH,SAASR,OAAS,EAAA;IAC3B,MAAM;MAACY;IAAA,CAAW,GAAA,MAAM3F,OAAO4F,OAA8B,CAAA;MAC3DC,KAAK7F,MAAO,CAAA8F,UAAA,CAAW,OAAOP,KAAM,CAAAzC,IAAA,CAAK,GAAG,CAAC,CAAA;MAC7CiD,IAAM,EAAA,IAAA;MACNC,KAAA,EAAO;QAACC,cAAA,EAAgB;MAAM,CAAA;MAC9BC,GAAK,EAAA;IAAA,CACN,CAAA;IAED,MAAMC,UAAa,GAAAR,OAAA,CAAQX,MAAmD,CAAA,CAACC,KAAKC,IAAS,KAAA;MACvFD,GAAA,CAAAC,IAAA,CAAKnG,EAAE,CAAA,GAAImG,IAAK,CAAAkB,MAAA;MACb,OAAAnB,GAAA;IACT,CAAA,EAAG,CAAE,CAAA,CAAA;IAEL,KAAA,MAAWlG,MAAMwG,KAAO,EAAA;MAGlB,IAAAY,UAAA,CAAWpH,EAAE,CAAA,KAAM,WAAa,EAAA;QAClC0F,WAAA,CAAYjG,IAAIO,EAAE,CAAA;MACpB;IACF;EACF;EACAhB,MAAA,CAAO8C,MAAMwF,wBAAyB,EAAA;EAEtC,OAAO;IAAC5B;EAAW,CAAA;AACrB;AAEA,eAAepF,iBAAoBA,CAAA,EAAA;EAGjC,MAAM;IAACiH,OAAS,EAAAC;EAAQ,CAAA,GAAA,MAAM,MAAA,CAAO,OAAO,CAAA;EAEtC,MAAAC,OAAA,GAAUC,8CAAuB1J,OAAO,CAAA;EAE1C,IAAA2J,QAAA;EAEA,IAAA;IACF,MAAM;MAAC1G,MAAA;MAAQhD;KAAS,GAAI,MAAMsC,aAAc,CAAA,CAAA;IAC1C,MAAA;MAAC6E;MAAc7B,WAAa;MAAAD,aAAA;MAAeO;KAC/C,GAAA,MAAM7B,kBAAkBf,MAAM,CAAA;IAC1B,MAAA;MAACyE;IAAe,CAAA,GAAA,MAAMF,wBAAwB;MAACvE,MAAA;MAAQqC,aAAe;MAAAC;IAAA,CAAY,CAAA;IAC7EoE,QAAA,GAAA9D,cAAA;IAEX,MAAM+D,SAAY,GAAyCC,OACzD,IAAA5G,MAAA,CAAO6G,WAAWD,OAAO,CAAA;IAErB,MAAAE,iBAAA,GAA4DC,KAAA;MAAA,IAAC;QAAChI;OAAE,GAAAgI,KAAA;MAAA,OACpEjD,QAAQC,OAAQ,CAAAU,WAAA,CAAYI,GAAI,CAAA9F,EAAE,CAAC,CAAA;IAAA;IAE/B,MAAAiI,QAAA,GAAYC,OAAgC,IAAA;MAChD,IAAIC,YAAe,GAAA,KAAA;MACnB,KAAA,MAAWC,UAAUF,OAAS,EAAA;QAC5B,IAAIE,OAAO9J,KAAU,KAAA,OAAA,EAAgB,OAAA,OAAA;QACrC,IAAI8J,OAAO9J,KAAU,KAAA,SAAA,EAA0B6J,YAAA,GAAA,IAAA;MACjD;MAEI,IAAAA,YAAA,EAAqB,OAAA,SAAA;MAClB,OAAA,MAAA;IAAA,CACT;IAEA,IAAIE,cAAiB,GAAA,CAAA;IAEf,MAAAC,QAAA,GAAW,MAAOhE,QAA6B,IAAA;MAC/C,IAAA4D,OAAA;MAEA,IAAA;QACI,MAAAK,OAAA,GAAUC,OAAO,SAAS,CAAA;QAE1B,MAAAC,MAAA,GAAS,MAAM1D,OAAA,CAAQ2D,IAAK,CAAA,CAChCC,uBAAiB,CAAA;UACfrE,QAAA;UACArG,SAAA;UACA2J,SAAA;UACAG,iBAAA;UACAa,WAAa,EAAA,KAAA;UACbrK;QAAA,CACD,CAAA,EACD,IAAIwG,OAAA,CAAyBC,OAC3B,IAAA6D,UAAA,CAAW,MAAM7D,OAAQ,CAAAuD,OAAO,GAAG1K,2BAA2B,CAChE,CAAA,CACD,CAAA;QAED,IAAI4K,WAAWF,OAAS,EAAA;UACtB,MAAM,IAAI5J,KAAA,CACR,YAAa,CAAAqC,MAAA,CAAAsD,QAAA,CAASG,GAAG,EAAA,8BAAA,CAAA,CAA+BzD,MAA2B,CAAAnD,2BAAA,EAAA,KAAA,CAAA,CACrF;QACF;QAEAqK,OAAA,GAAUO,MAEP,CAAAK,GAAA,CAAIC,KAAA;UAAA,IAAC;YAACpJ,IAAM;YAAA,GAAGyI;UAAM,CAAA,GAAAW,KAAA;UAAA,OAAMX,MAAM;QAAA,EAAA,CAEjCvC,MAAO,CAACuC,MAAW,IAAA;UAzW9B,IAAAnG,EAAA;UA0WkB,MAAA+G,WAAA,GAAcpK,WAAY,CAAAwJ,MAAA,CAAO9J,KAAK,CAAA;UAC5C,MAAM2K,cACJ,GAAA,CAAAhH,EAAA,GAAArD,WAAA,CAAYN,KAAiC,CAAA,KAA7C,YAAkDM,WAAY,CAAAG,IAAA;UAChE,OAAOiK,WAAe,IAAAC,cAAA;QAAA,CACvB,CAAA;eACI9D,GAAK,EAAA;QACN,MAAA+D,YAAA,GACJC,MAAAA,CAAAA,SAAShE,GAAG,CAAA,IAAK,OAAOA,GAAI,CAAAiE,OAAA,KAAY,QAAW,GAAAjE,GAAA,CAAIiE,OAAU,GAAA,eAAA;QAEnE,MAAMA,UAAU,6CAA8C,CAAApI,MAAA,CAAAkI,YAAA,CAAA;QAEpDhB,OAAA,GAAA,CACR;UACEkB,OAAA;UACA9K,KAAO,EAAA,OAAA;UACPwF,MAAM;QACR,CAAA,CACF;MACF;MAEAuE,cAAA,EAAA;MAEOrJ,MAAA,CAAA4F,MAAA,CAAOyE,WAAWvE,IAAK,CAAA;QAC5BwE,YAAYhF,QAAS,CAAAG,GAAA;QACrB8E,cAAcjF,QAAS,CAAAkF,KAAA;QACvBC,UAAUnF,QAAS,CAAAoF,GAAA;QACnBxB,OAAA;QACAG,cAAA;QACA/J,KAAA,EAAO2J,SAASC,OAAO;MAAA,CACxB,CAAA;IAAA,CACH;IAEA,MAAMV,KAAKpC,YAAa,EAAA,EAAGkD,UAAU;MAACqB,WAAA,EAAa/L;KAA2B,CAAA;IAEvEoB,MAAA,CAAA4F,MAAA,CAAOyE,WAAW9D,GAAI,EAAA;EAAA,CAC7B,SAAA;IACQkC,OAAA,EAAA;IAGR,IAAIE,QAAY,IAAAxD,WAAAA,CAAAA,OAAA,CAAGyF,UAAW,CAAAjC,QAAQ,CAAG,EAAA;MACjC,MAAAxD,mBAAA,CAAG0F,QAAS,CAAAC,EAAA,CAAGnC,QAAQ,CAAA;IAC/B;EACF;AACF"}