{
  "version": 3,
  "sources": ["../../../sanity/src/structure/panes/userComponent/UserComponentPaneHeader.tsx", "../../../sanity/src/structure/panes/userComponent/UserComponentPaneContent.tsx", "../../../sanity/src/structure/panes/userComponent/UserComponentPane.tsx"],
  "sourcesContent": ["import React from 'react'\nimport {ArrowLeftIcon} from '@sanity/icons'\nimport {Button} from '../../../ui-components'\nimport type {PaneMenuItem, PaneMenuItemGroup, StructureToolPaneActionHandler} from '../../types'\nimport {BackLink, PaneHeader, PaneHeaderActions} from '../../components'\nimport {useStructureTool} from '../../useStructureTool'\n\ninterface UserComponentPaneHeaderProps {\n  actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  index: number\n  menuItems?: PaneMenuItem[]\n  menuItemGroups?: PaneMenuItemGroup[]\n  title: string\n}\n\nexport function UserComponentPaneHeader(props: UserComponentPaneHeaderProps) {\n  const {actionHandlers, index, menuItems, menuItemGroups, title} = props\n  const {features} = useStructureTool()\n\n  if (!menuItems?.length && !title) {\n    return null\n  }\n\n  return (\n    <PaneHeader\n      actions={\n        <PaneHeaderActions\n          menuItems={menuItems}\n          menuItemGroups={menuItemGroups}\n          actionHandlers={actionHandlers}\n        />\n      }\n      backButton={\n        features.backButton &&\n        index > 0 && (\n          <Button\n            as={BackLink}\n            data-as=\"a\"\n            icon={ArrowLeftIcon}\n            mode=\"bleed\"\n            tooltipProps={{content: 'Back'}}\n          />\n        )\n      }\n      title={title}\n    />\n  )\n}\n", "import {Box} from '@sanity/ui'\nimport React from 'react'\nimport styled from 'styled-components'\nimport {usePane} from '../../components'\n\ninterface UserComponentPaneContentProps {\n  children: React.ReactNode\n}\n\nconst Root = styled(Box)`\n  position: relative;\n`\n\nexport function UserComponentPaneContent(props: UserComponentPaneContentProps) {\n  const {children} = props\n  const {collapsed} = usePane()\n\n  return (\n    <Root hidden={collapsed} height=\"fill\" overflow=\"auto\">\n      {children}\n    </Root>\n  )\n}\n", "import React, {createElement, isValidElement, useState} from 'react'\nimport {isValidElementType} from 'react-is'\nimport {Pane} from '../../components'\nimport type {StructureToolPaneActionHandler} from '../../types'\nimport type {BaseStructureToolPaneProps} from '../types'\nimport {UserComponentPaneHeader} from './UserComponentPaneHeader'\nimport {UserComponentPaneContent} from './UserComponentPaneContent'\nimport {useI18nText} from 'sanity'\n\ntype UserComponentPaneProps = BaseStructureToolPaneProps<'component'>\n\n/**\n * @internal\n */\nexport function UserComponentPane(props: UserComponentPaneProps) {\n  const {index, pane, paneKey, ...restProps} = props\n  const {\n    child,\n    component,\n    menuItems,\n    menuItemGroups,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    type: _unused,\n    ...restPane\n  } = pane\n  const [ref, setRef] = useState<{\n    actionHandlers?: Record<string, StructureToolPaneActionHandler>\n  } | null>(null)\n  const {title = ''} = useI18nText(pane)\n\n  return (\n    <Pane id={paneKey} minWidth={320} selected={restProps.isSelected}>\n      <UserComponentPaneHeader\n        actionHandlers={ref?.actionHandlers}\n        index={index}\n        menuItems={menuItems}\n        menuItemGroups={menuItemGroups}\n        title={title}\n      />\n\n      <UserComponentPaneContent>\n        {isValidElementType(component) &&\n          createElement(component, {\n            ...restProps,\n            ...restPane,\n            // NOTE: here we're utilizing the function form of refs so setting\n            // the ref causes a re-render for `UserComponentPaneHeader`\n            ...({ref: setRef} as any),\n            child: child as any, // @todo: Fix typings\n            paneKey,\n          })}\n\n        {isValidElement(component) && component}\n      </UserComponentPaneContent>\n    </Pane>\n  )\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAeO,SAASA,wBAAwBC,OAAqC;AAC3E,QAAM;IAACC;IAAgBC;IAAOC;IAAWC;IAAgBC;EAAS,IAAAL;AAC5D,QAAA;IAACM;MAAYC,iBAAiB;AAEpC,MAAI,EAACJ,aAAA,OAAA,SAAAA,UAAWK,WAAU,CAACH,OAAO;AACzB,WAAA;EACT;AAGE,aAAAI,wBAACC,YAAA;IACCC,aACEF,wBAACG,mBAAA;MACCT;MACAC;MACAH;IAAA,CACF;IAEFY,YACEP,SAASO,cACTX,QAAQ,SACNO,wBAACK,QAAA;MACCC,IAAIC;MACJ,WAAQ;MACRC,MAAMC;MACNC,MAAK;MACLC,cAAc;QAACC,SAAS;MAAM;IAAA,CAChC;IAGJhB;EAAA,CAAA;AAGN;;;;;;AC/CA,IAAAiB;AASA,IAAMC,OAAOC,GAAOC,GAAG,EAAVH,OAAWA,KAAAI,WAAA,CAAA,2BAAA,CAAA,EAAA;AAIjB,SAASC,yBAAyB3B,OAAsC;AACvE,QAAA;IAAC4B;EAAY,IAAA5B;AACb,QAAA;IAAC6B;MAAaC,QAAQ;AAG1B,aAAArB,wBAACc,MAAAA;IAAKQ,QAAQF;IAAWG,QAAO;IAAOC,UAAS;IAC7CL;EACH,CAAA;AAEJ;ACRO,SAASM,kBAAkBlC,OAA+B;AAC/D,QAAM;IAACE;IAAOiC;IAAMC;IAAS,GAAGC;EAAa,IAAArC;AACvC,QAAA;IACJsC;IACAC;IACApC;IACAC;;IAEAoC,MAAMC;IACN,GAAGC;EACD,IAAAP;AACJ,QAAM,CAACQ,KAAKC,MAAM,QAAIC,uBAEZ,IAAI;AACd,QAAM;IAACxC,QAAQ;EAAE,IAAIyC,YAAYX,IAAI;AAGnC,aAAAY,yBAACC,MAAAA;IAAKC,IAAIb;IAASc,UAAU;IAAKC,UAAUd,UAAUe;IACpDxB,UAAA,KAAAnB,wBAACV,yBAAA;MACCE,gBAAgB0C,OAAK,OAAA,SAAAA,IAAA1C;MACrBC;MACAC;MACAC;MACAC;IAAA,CACF,OAAA,yBAECsB,0BACE;MAAAC,UAAA,KAAmByB,oCAAAd,SAAS,SAC3Be,4BAAcf,WAAW;QACvB,GAAGF;QACH,GAAGK;;;QAGH,GAAI;UAACC,KAAKC;QAAM;QAChBN;;QACAF;MAAA,CACD,OAEFmB,6BAAehB,SAAS,KAAKA,SAAA;KAChC,CAAA;EACF,CAAA;AAEJ;",
  "names": ["UserComponentPaneHeader", "props", "actionHandlers", "index", "menuItems", "menuItemGroups", "title", "features", "useStructureTool", "length", "jsx", "PaneHeader", "actions", "PaneHeaderActions", "backButton", "Button", "as", "BackLink", "icon", "ArrowLeftIcon", "mode", "tooltipProps", "content", "_a", "Root", "styled", "Box", "__template", "UserComponentPaneContent", "children", "collapsed", "usePane", "hidden", "height", "overflow", "UserComponentPane", "pane", "paneKey", "restProps", "child", "component", "type", "_unused", "restPane", "ref", "setRef", "useState", "useI18nText", "jsxs", "Pane", "id", "minWidth", "selected", "isSelected", "isValidElementType", "createElement", "isValidElement"]
}
